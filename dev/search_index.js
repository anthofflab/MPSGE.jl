var documenterSearchIndex = {"docs":
[{"location":"reference/#Reference-Guide","page":"Reference","title":"Reference Guide","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"Model\nadd!\nset_value\nset_fixed!\nParameter\nSector","category":"page"},{"location":"reference/#MPSGE.Model","page":"Reference","title":"MPSGE.Model","text":"Model()     The struct that stores all the elements of the model.\n\nExample\n\njulia> foo = Model()\n\n\n\n\n\n","category":"type"},{"location":"reference/#MPSGE.add!","page":"Reference","title":"MPSGE.add!","text":"add!(m,bar)\nFunction that adds an element to the model with a name assignment\nm::Model is always the first Argument\n\n# Options\nParameter::ScalarParameter, ::IndexedParameter\nCommodity::ScalarCommodity, ::IndexedCommodity\nSector::ScalarSector,       ::IndexedSector\nConsumer::ScalarConsumer,   ::IndexedConsumer\nAux::ScalarAux,             ::IndexedAux\n\nExample\n\njulia> S = add!(m, Sector())\n\nProduction::Production\nDemand::DemandFunction\nAuxConstraint::AuxConstraint\n\nExample\n\njulia> add!(m, Production()) \n\n\n\n\n\n","category":"function"},{"location":"reference/#JuMP.set_value","page":"Reference","title":"JuMP.set_value","text":"set_value(P, value::Float64)\nFunction that allows users to set a specific value for a variable, updating the benchmark field.\n\nOptions\n\nParameter::ScalarParameter, ::IndexedParameter\nCommodity::ScalarCommodity, ::IndexedCommodity\nSector::ScalarSector,       ::IndexedSector\nConsumer::ScalarConsumer,   ::IndexedConsumer\nAux::ScalarAux,             ::IndexedAux\n\nExample\n\njulia> set_value(var, 1.3)\n\n\n\n\n\n","category":"function"},{"location":"reference/#MPSGE.set_fixed!","page":"Reference","title":"MPSGE.set_fixed!","text":"set_fixed!(P, true::Boolean)\nFunction that allows users to fix a value for a variable, the benchmark, the value from set_value, or the previous value.\n\nOptions\n\nParameter::ScalarParameter, ::IndexedParameter\nCommodity::ScalarCommodity, ::IndexedCommodity\nSector::ScalarSector,       ::IndexedSector\nConsumer::ScalarConsumer,   ::IndexedConsumer\nAux::ScalarAux,             ::IndexedAux\n\nExample\n\njulia> set_value(var, false)\n\n\n\n\n\n","category":"function"},{"location":"reference/#MPSGE.Parameter","page":"Reference","title":"MPSGE.Parameter","text":"Parameter(:symbol; indices, value::Float64=1., string)\nStruct that holds the name, indices if IndexedParameter, value, and optional description of a parameter within the model.\n\nOptions\n\nParameter::ScalarParameter, IndexedParameter\n\nExample\n\njulia> P = add!(Parameter(model, :P, value=1., description=\"Elasticity\"))\njulia> sectors = [:s1, :s2]\njulia> P = add!(Parameter(model, :P, indices=(,sectors), value=1., description=\"Elasticity parameters for X Sector \"))\n\n\n\n\n\n","category":"type"},{"location":"reference/#MPSGE.Sector","page":"Reference","title":"MPSGE.Sector","text":"Sector(:symbol; indices, value::Float64=1., string)\nStruct that holds the name, (indices if IndexedSector), value, and optional description of a sector within the model.\n\nOptions\n\nSector::ScalarSector, IndexedSector\n\nExample\n\njulia> S = add!(Sector(model, :S, value=1., description=\"Sector S\"))\njulia> sectors = [:s1, :s2]\njulia> P = add!(Sector(model, :S, indices=(,sectors), value=1., description=\"S[:s1] and S[:s2] Sectors\"))\n\n\n\n\n\n","category":"type"},{"location":"#MPSGE.jl","page":"Home","title":"MPSGE.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"MPSGE.jl is a Julia evolution of the GAMS MPSGE subsystem.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The Documentation for MPSGE should be useful to reference, especially for background, theory, and for some understanding of features while the MPSGE.jl documentation is still being written.","category":"page"},{"location":"","page":"Home","title":"Home","text":"As we're still in development, tagging can lag a bit. To load the most current version of main (which may be ahead of the tagged registered version), run \"add MPSGE#main\" in the package handler (\"]\" in VS code), or Pkg.add(\"MPSGE#main\"), which will establish the current version of the main branch as the package.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The documentation here will probably grow in fits and starts. Please give us feedback as we go, and let us know what would be especially helpful.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Add the MPSGE package <p> Activate the package with ","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"using MPSGE","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Start by naming the model using any Julia-legal variable name, without spaces etc. The Julia style guide suggests lower case for variable names.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"m = Model()","category":"page"},{"location":"tutorial/#Build-the-model-by-adding-all-the-elements","page":"Tutorial","title":"Build the model by adding all the elements","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"note: Note\n","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Scalars and arrays can be used to provide values, inlcuding for model parameters like elasticities, but can not be changed within the model in counterfactuals, so any value that needs to be updated should be added as a model Parameter.<br> Add Parameters <br>","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"P = add!()","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"Add Commodities","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"C = add!()","category":"page"},{"location":"tutorial/#Check-the-benchmark-solution","page":"Tutorial","title":"Check the benchmark solution","text":"","category":"section"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"After the model is established and saved under the model name, it is standard to check that the model is mathematically balanced in the benchmark by solving with 0 iterations.","category":"page"},{"location":"tutorial/","page":"Tutorial","title":"Tutorial","text":"solve!(m, cumulative_iteration_limit=0)","category":"page"}]
}
