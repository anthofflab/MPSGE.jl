@testitem "TWOBYTWO ThetaTest (macro version)" begin
    using XLSX, MPSGE.JuMP.Containers

m = Model()

@parameter(m, endow, 1.0)
@parameter(m, diff, 0.0)

@sector(m, X)
@sector(m, Y)
@sector(m, U)

@commodity(m, PX)
@commodity(m, PY)
@commodity(m, PU)
@commodity(m, PL)
@commodity(m, PK)

@consumer(m, RA, benchmark = 150.)

@production(m, X, 0, 1, [Output(PX, :(100+$diff))], [Input(PL, 50), Input(PK, 50)])
@production(m, Y, 0, 1, [Output(PY, 50)], [Input(PL, 20), Input(PK, 30)])
@production(m, U, 0, 1, [Output(PU, 150)], [Input(PX, 100), Input(PY, 50)])

@demand(m, RA, 1.0, [Demand(PU, 150)], [Endowment(PL, :(70 * $endow)), Endowment(PK, 80.)])
solve!(m, cumulative_iteration_limit=0)

@test value(m, :X) ≈ 1.
    @test MPSGE.Complementarity.result_value(m._jump_model[:Y]) ≈ 1.
    @test MPSGE.Complementarity.result_value(m._jump_model[:U]) ≈ 1.
    @test MPSGE.Complementarity.result_value(m._jump_model[:RA]) ≈  150.
    @test MPSGE.Complementarity.result_value(m._jump_model[:PX]) ≈  1.
    @test MPSGE.Complementarity.result_value(m._jump_model[:PY]) ≈  1.
    @test MPSGE.Complementarity.result_value(m._jump_model[:PU]) ≈  1.
    @test MPSGE.Complementarity.result_value(m._jump_model[:PL]) ≈  1.
    @test MPSGE.Complementarity.result_value(m._jump_model[:PK]) ≈  1.
# Implicit Variables
    @test MPSGE.Complementarity.result_value(m._jump_model[Symbol("PL†X")]) ≈  50.
    @test MPSGE.Complementarity.result_value(m._jump_model[Symbol("PL†Y")]) ≈  20.
    @test MPSGE.Complementarity.result_value(m._jump_model[Symbol("PK†X")]) ≈  50.
    @test MPSGE.Complementarity.result_value(m._jump_model[Symbol("PK†Y")]) ≈  30.
    @test MPSGE.Complementarity.result_value(m._jump_model[Symbol("PX†U")]) ≈  100.
    @test MPSGE.Complementarity.result_value(m._jump_model[Symbol("PY†U")]) ≈  50.

set_value(diff, 10.)
# set_value(RA, 165.)
set_value(endow, 1.1)
set_fixed!(RA, true)
solve!(m)

        @test value(m, :X) ≈ 1.04880885
        @test MPSGE.Complementarity.result_value(m._jump_model[:Y]) ≈ 1.03886012
        @test MPSGE.Complementarity.result_value(m._jump_model[:U]) ≈ 1.11406803
        @test MPSGE.Complementarity.result_value(m._jump_model[:PX]) ≈ 0.90723410
        @test MPSGE.Complementarity.result_value(m._jump_model[:PY]) ≈ 1.00751453
        @test MPSGE.Complementarity.result_value(m._jump_model[:PU]) ≈ 0.93949978
        @test MPSGE.Complementarity.result_value(m._jump_model[:PL]) ≈ 0.95151515
        @test MPSGE.Complementarity.result_value(m._jump_model[:PK]) ≈ 1.04666667
        @test MPSGE.Complementarity.result_value(m._jump_model[Symbol("PL†X")]) ≈ 110
        @test MPSGE.Complementarity.result_value(m._jump_model[Symbol("PK†X")]) ≈ 50
        @test MPSGE.Complementarity.result_value(m._jump_model[Symbol("PL†Y")]) ≈ 150
        @test MPSGE.Complementarity.result_value(m._jump_model[Symbol("PK†Y")]) ≈ 52.44044241
        @test MPSGE.Complementarity.result_value(m._jump_model[Symbol("PX†U")]) ≈ 47.67312946
        @test MPSGE.Complementarity.result_value(m._jump_model[Symbol("PY†U")]) ≈ 21.17705706
        @test MPSGE.Complementarity.result_value(m._jump_model[Symbol("PX‡X")]) ≈ 28.87780508
        @test MPSGE.Complementarity.result_value(m._jump_model[Symbol("PY‡Y")]) ≈ 103.5565
        @test MPSGE.Complementarity.result_value(m._jump_model[Symbol("PU‡U")]) ≈ 46.62462680
        @test MPSGE.Complementarity.result_value(m._jump_model[:RA]) ≈ 157
        @test MPSGE.Complementarity.result_value(m._jump_model[Symbol("PUρRA")]) ≈ 167.1102


end